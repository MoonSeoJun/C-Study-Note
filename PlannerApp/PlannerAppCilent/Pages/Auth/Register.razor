@page "/auth/register"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject PlannerApp.Shared.Services.AuthenticationService  authService
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-12">
        <h2>Create a new account</h2>
        <EditForm Model="model" OnInvalidSubmit="RegisterUser">
            <RadzenCard>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert alert-info">@message</div>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>First Name</label>
                <RadzenTextBox @bind-Value="model.FirstName"></RadzenTextBox>

                <label>Last Name</label>
                <RadzenTextBox @bind-Value="model.LastName"></RadzenTextBox>

                <label>Email Name</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.PassWord"></RadzenPassword>

                <label>Confirm Password</label>
                <RadzenPassword @bind-Value="model.ConfirmPassword"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              class="btn-block mr-2"
                              Disabled="isBusy"></RadzenButton>
                <RadzenButton ButtonType="Radzen.ButtonType.Submit"  Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" 
                              class="btn-block mr-2"
                              Disabled="isBusy"></RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>
@code {
    RegisterRequest model = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;

    public async Task RegisterUser()
    {
        isBusy = true;

        var result = await authService.RegisterUserAsync(model);

        if (result.IsSuccess)
        {
            message = result.Message;
        }
        else
        {
            message = result.Message;
        }
        isBusy = false;
    }
}
